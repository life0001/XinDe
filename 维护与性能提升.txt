//维护
1.（1）HTML定义内容;（2）CSS定义外观；（3）JS定义行为；这些混淆在一起就难以调试；
2.注释。（1）每个函数或方法都应该加注释。（2）大段代码前面加注释；（3）兼容性代码加注释；
3.命名。变量名应为名词；函数名为动词getName()；返回布尔值以is开头isEnable();
4.变量名类型。bEnable（boolean），iCount（int），sName（string），oPerson（obj）；
5.避免全局变量。

//维护  松散耦合   
记住：
1.写函数要把应用逻辑（非事件逻辑） 和 事件处理程序代码分开
2.勿将event对象传给其他方法
3.任何事件处理程序都应该处理事件，然后将处理转交给应用逻辑
做到这几条可以大大改进代码可维护性

//维护  最终对象所有权
不在非自己创建的对象上做以下修改
1.不要为实例或原型添加属性和方法；
2.不要重新定义已经存在的方法；

//将数据与使用它的逻辑分离，好处是 无需接触它的函数情况下进行变更
var data={
   name:'',
   url:'',
}
function getData(){
    alert(data.name);
    location.href=data.url;
}

//性能
1.函数内避免全局查找。可以给全局对象赋值给一个变量或者通过参数传进来；
2.避免不必要的属性查找。变量和数组查找比对象属性查找要快。2次以上用到对象属性的可以给它赋给一个变量；for(var i=0,len=x.length; i<len;i++)
3.优化循环。减值迭代；
4.避免双重解释。setTimeout('alert(1)',100)  错！不要这样写！正确应该是：setTimeout(function(){alert(1)},100)。还有eval()里面不要放JS方法如：eval('alert(1)')
5.JS原生方法较快；
6.switch语句较快；
7.位运算符较快；
8.最小化语句数；(1)var a; var b; 最小化后var a,b;   (2)插入迭代值：var d=f[i]; i++; 最小化后var d=f[i++]；
9.尽量使用数组和对象字面量。因为对象字面量和数组可以只用一句话就能创建和初始化对象的属性、方法；
10.最小化现场更新（更改DOM结构）。用innerHTML创建页面节点较快; var html=''; for(var i=10; i>=0; i--){html+='<li>'+i+'</li>'}document.getElementsByTagName('body')[0].innerHTML=html
11.使用事件代理；
12.代码要压缩后再部署到服务器。 太多空格、冗长的函数名和变量名会增加浏览器的负担、注释不能太全，可能会被别人找出漏洞；
13.javascript文件部署到服务器尽量少，但多个文件可提高代码维护性。http请求是web中主要瓶颈之一。<script>调用js文件是阻塞操作，当代码下载并运行的时候，会停止其他所有下载；
14.使用前端构建工具gulp。一些功能：（1）合并、压缩JS/css文件；（2）编译sass/less；（3）批量压缩图片；（4）批量按规则创建文件夹……；
